library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
print("hello world")
c(1,2)
1+2
2-5
hist(2,5,6,8,9,11,12,3,2,5)
x <- 1
print (x)
x
print ("Hello")
msg <- Hello
msg <- "Hello"
print (msg)
x <- 1:20
x
print (x)
x <- 1
y < 0:25
y <- 0:25
y
x <- Inf
x
x <- inf
x <- NaN
print x
print (x)
c(0.5,0.6)
x <- c(0.5,0.6)
print x(1)
print x
print(x[1])
print(x[2])
y <- c(0.5, TRUE)
print(y[1])
print(y[2])
y <- c("a", TRUE)
print(y[1])
print(y[2])
x <- "a"
class(x)
x <- list(1, "a", TRUE, 2-3i)
x
print(x)
print(x[1])
print(x[[1]])
print(x[[4]])
x <- matrix(2,3)
x
x <- matrix(nrow=2,ncol=3)
x
dim(x)
attributes(x)
m <- matrix(3,4,5,6,1,2,nrow=2, ncol=3)
m <- matrix(3,4,5,nrow=2, ncol=3)
m <- 1:10
dim(m) <- c(5,2)
print(m)
factors("A","B","C","D")
x<- factors(c("A","B","C","D"))
x<- factor(c("A","B","C","D"))
x
table(x)
x<- factor(c("A","B","C","D","B","D"))
table(x)
unclass(x)
x<- factor(c("A","B","C","D","B","D"))
x
levels("D","B","A","C")
levels(c("D","B","A","C"))
x
levels=c("D","B","A","C")
x
library(httr)
oauth_endpoints("github")
myapp<-oauth_app("github",key="af399390df061b3c088a",secret="328df0d202770b138867eca887982bf8e530ca2c")
github_token<-oauth2.0_token(oauth_endpoints("github"), myapp)
fsd
library(httr)
oauth_endpoints("github")
myapp<-oauth_app("github",key="af399390df061b3c088a",secret="328df0d202770b138867eca887982bf8e530ca2c")
github_token<-oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(lattice)
state<-data.frame(state.x77, region=state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout=c(4,1))
print(state.name)
print(Life.Exp)
print(state.region)
library(ggplot2)
data(mpg)
qplot(displ, hwy, data=mpg)
library(lattice)
state<-data.frame(state.x77, region=state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout=c(4,1))
print(state.x77)
library(lattice)
library(datasets)
xyplot(Ozon ~ Wind, data = airquality)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
library(help="datasets")
print(airquality)
airquality<-transform(airquality, Month=factor(month))
airquality<-transform(airquality, Month=factor(Month))
print(airquality)
library(lattice)
library(datasets)
airquality<-transform(airquality, Month=factor(Month))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(7,1))
library(lattice)
library(datasets)
airquality<-transform(airquality, Month=factor(Month))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(4,1))
library(lattice)
library(datasets)
airquality<-transform(airquality, Month=factor(Month))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(4,1))
library(lattice)
library(datasets)
airquality<-transform(airquality, Month=factor(Month))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5,1))
library(lattice)
library(datasets)
airquality<-transform(airquality, Month=factor(Month))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(3,1))
library(lattice)
library(datasets)
airquality<-transform(airquality, Month=factor(Month))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(1,1))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
ppois(10, lambda = 5 * 3)
pnorm(16, mean = 15, sd = 10, lower.tail = FALSE)
pnorm(14, mean = 15, sd = 10, lower.tail = FALSE)
getwd()
wd<-"C:/Users/lnkkota.Home-PCC/DataScienceAssignments/Getting and Cleaning Data/Assignment/UCI_HAR_Dataset"
dir()
setwd(wd)
wd
getwd()
setwd(wd)
wd<-"C:/Users/lnkkota.Home-PCC/DataScienceAssignments/GettingAndCleaningData/Assignment/UCI_HAR_Dataset"
setwd(wd)
wd<-"C:/Users/lnkkota.Home-PCC/DataScienceAssignments/GaCData/Assignment/UCI_HAR_Dataset"
setwd(wd)
getwd()
install.packages("microtype"")
)
;
.
q
data("ToothGrowth")
summary(ToothGrowth)
names(ToothGrowth)
names(len)
names("len")
names(ToothGrowth.len)
ToothGrowth
install.packages("ggplot")
len(ToothGrowth)
length(ToothGrowth)
plot(ToothGrowth$len,ToothGrowth$supp)
unique(ToothGrowth$supp)
ggplot(ToothGrowth,aes(x=as.factor(ToothGrowth$dose), y=ToothGrowth$len), fill=x)+ geom_boxplot() + facet_grid(.~z)
library("ggplot2")
ggplot(ToothGrowth,aes(x=as.factor(ToothGrowth$dose), y=ToothGrowth$len), fill=x)+ geom_boxplot() + facet_grid(.~z)
data("ToothGrowth")
ToothGrowth.len
data.set("ToothGrowth")
data("ToothGrowth")
print(ToothGrowth$len)
data(mtcars)
summary(mtcars)
names(mtcars)
len(mpg)
length(mpg)
mpg
sumary(mpg)
summary(mpg)
colnames(mpg)
names(mtcars)
ncol(mpg)
ncol(cyl)
ncol(disp)
names(mtcars)
colnames(mtcars$cyl)
mtcars$cyl
mtcars$disp
View(mtcars)
ncol(mpg)
mpg
names(mtcars)
names(mtcars$mpg)
nrow(ntcars)
nrow(mtcars)
mtcars$hp
mtcars$drat
mtcars$wt
mtcars$qsec
mtcars$vs
mtcars$am
mtcars$gear
mtcars$carb
mtcars$mpg
names(mtcars$mpg)
names(mpg)
colnames(mpg)
unique(mpg$trans)
mpg
x<-mpg
x
View(mtcars)
View(x)
plot(mpg,trans)
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
?mtcars
pairs(mtcars)
scatterplot(mtcars$mps,mtcars$disp)
library(car)
scatterplot(mtcars$mps,mtcars$disp)
g <- ggplot(data=mtcars, aes(x=disp, y= mpg, fill=factor(am)))
g
g+geom_boxplot()+facet_grid(.~am)+guides(fill=FALSE)+
labs(x="Disp", y="AM")+ labs(title="MPG Plots")
g <- ggplot(data=mtcars, aes(x=disp, y= mpg, fill=factor(am)))
g+geom_boxplot()+facet_grid(.~factor(am))+guides(fill=FALSE)+
labs(x="Disp", y="AM")+ labs(title="MPG Plots")
g <- ggplot(data=mtcars, aes(x=disp, y= mpg, fill=factor(am)))
g+geom_boxplot()+facet_grid(.~am)+guides(fill=FALSE)+
labs(x="Disp", y="AM")+ labs(title="MPG Plots")
g
g <- ggplot(data=mtcars, aes(x=disp, y= mpg, fill=factor(am)))
g+geom_boxplot()+facet_grid(.~factor(am))+guides(fill=FALSE)+
labs(x="Disp", y="AM")+ labs(title="MPG Plots")
install.packages("caret")
wd<-"C:/Users/lnkkota.Home-PC/datasciencecoursera/MachineLearning"
if (!is.null(wd)) setwd(wd)
rawdata <- read.csv("pml_training.csv", na.strings=c("NA",""),strip.white = T)
dim(rawdata)
getwd()
dir()
rawdata <- read.csv("pml-training.csv", na.strings=c("NA",""),strip.white = T)
dim(rawdata)
isNA <- apply(rawData, 2, function(x) { sum(is.na(x)) })
isNA <- apply(rawdata, 2, function(x) { sum(is.na(x)) })
library(caret)
set.seed(1234)
wd<-"C:/Users/lnkkota.Home-PC/datasciencecoursera/MachineLearning"
if (!is.null(wd)) setwd(wd)
rawdata <- read.csv("pml-training.csv", na.strings=c("NA",""),strip.white = T)
dim(rawdata)
isNA <- apply(rawdata, 2, function(x) { sum(is.na(x)) })
validData <- subset(rawdata[, which(isNA == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
dim(validData)
inTrain <- createDataPartition(validData$classe, p=0.7, list=F)
training <- validData[inTrain,]
testing <- validData[-inTrain,]
dim(training)
ctrl <- trainControl(allowParallel=T, method="cv", number=4)
model <- train(classe ~ ., data=training, model="rf", trControl=ctrl)
pred <- predict(model, newdata=testing)
model <- train(classe ~ ., data=training, model="rf", trControl=ctrl)
install.packages("e1071")
model <- train(classe ~ ., data=training, model="rf", trControl=ctrl)
